{"version":3,"file":"static/js/779.b2d2036f.chunk.js","mappings":"qPAEaA,EAAcC,EAAAA,GAAAA,EAAH,2CAIXC,EAAcD,EAAAA,GAAAA,GAAH,2EAKXE,EAAkBF,EAAAA,GAAAA,GAAH,wBAGfG,EAAiBH,EAAAA,GAAAA,EAAH,6H,SCwB3B,EA5BgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBN,GAASO,KAAKH,EAC/B,GAAE,CAACJ,IAEsC,IAAnBG,EAAQK,QAG7B,SAACb,EAAD,wDAEA,SAACE,EAAD,UACGM,EAAQM,KAAI,SAAAC,GACX,IAAQC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,OACrB,OACE,UAACf,EAAD,YACE,SAACH,EAAD,WACE,oCAAYkB,QAEd,SAACd,EAAD,UAAiBa,MAJGD,EAOzB,KAGN,C,8LCnCDG,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAIHC,EAAiB,mCAAG,sGACNF,EAAAA,GAAAA,IAAA,qCAAwCC,IADlC,cACvBE,EADuB,OAEvBC,EAAiBD,EAASE,KAAKC,QAAQX,KAAI,SAAAY,GAE7C,MAAO,CACHV,GAFgBU,EAAbV,GAGHW,MAHgBD,EAATC,MAKd,IAR4B,kBAStBJ,GATsB,2CAAH,qDAajBK,EAAmB,SAACC,GAC7B,OAAOC,MAAM,qDAAD,OAAsDV,EAAtD,wCAA6FS,IACpGjB,MAAK,SAAAU,GAAQ,OAAIA,EAASS,MAAb,IACbnB,MAAK,SAAAY,GACF,IAAMQ,EAAYR,EAAKC,QAAQX,KAAI,SAAAY,GAE/B,MAAO,CACHV,GAFkBU,EAAdV,GAGJW,MAHkBD,EAAVC,MAKf,IAED,OAAyB,IAArBK,EAAUnB,QACVoB,MAAM,yDACC,IAGJD,CACV,GACR,EAIYE,EAAe,mCAAG,WAAOlB,GAAP,qGACJG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,oBAAiCI,IAD7B,cACrBE,EADqB,SAGgDA,EAASE,KAA7EW,EAHoB,EAGpBA,aAAcR,EAHM,EAGNA,MAAOS,EAHD,EAGCA,SAAUC,EAHX,EAGWA,OAAQC,EAHnB,EAGmBA,YAAaC,EAHhC,EAGgCA,aAHhC,kBAKpB,CACHJ,aAAAA,EACAR,MAAAA,EACAS,SAAAA,EACAC,OAAAA,EACAC,YAAAA,EACAC,aAAAA,IAXuB,2CAAH,sDAgBfC,EAAY,mCAAG,WAAOxB,GAAP,yFACDG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,oBADC,cAClBE,EADkB,OAGlBmB,EAAWnB,EAASE,KAAKkB,KAAK5B,KAAI,SAAA6B,GAEpC,MAAO,CACHC,KAFwCD,EAArCC,KAGHC,UAHwCF,EAA/BE,UAITC,aAJwCH,EAApBG,aAKpB9B,GALwC2B,EAAN3B,GAMzC,IAVuB,kBAYjByB,GAZiB,2CAAH,sDAiBZ9B,EAAe,mCAAG,WAAOK,GAAP,yFACJG,EAAAA,GAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,2BADI,cACrBE,EADqB,OAErBd,EAAUc,EAASE,KAAKC,QAAQX,KAAI,SAAA6B,GAEtC,MAAO,CACH3B,GAF2B2B,EAAxB3B,GAGHE,OAH2ByB,EAApBzB,OAIPD,QAJ2B0B,EAAZ1B,QAKtB,IAR0B,kBAUpBT,GAVoB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsText = styled.p`\n    color: black;\n`;\n\nexport const ReviewsList = styled.ul`\n    list-style-type: none;\n    margin-top: 20px;\n`;\n\nexport const ReviewsListItem = styled.li`\n`;\n\nexport const ReviewsContent = styled.p`\n    max-width: auto;\n    margin-right: 20px;\n    padding: 5px;\n    border: 1px grey solid;\n    \n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/api';\nimport {\n  ReviewsText,\n  ReviewsList,\n  ReviewsListItem,\n  ReviewsContent,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getMovieReviews(movieId).then(setReviews);\n  }, [movieId]);\n\n  const isReviewsEmpty = reviews.length === 0;\n\n  return isReviewsEmpty ? (\n    <ReviewsText>We don't have any reviews for this movie</ReviewsText>\n  ) : (\n    <ReviewsList>\n      {reviews.map(review => {\n        const { id, content, author } = review;\n        return (\n          <ReviewsListItem key={id}>\n            <ReviewsText>\n              <b>Author: {author}</b>\n            </ReviewsText>\n            <ReviewsContent>{content}</ReviewsContent>\n          </ReviewsListItem>\n        );\n      })}\n    </ReviewsList>\n  );\n};\nexport default Reviews;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"54fe9974191bebd3941b5ae3cdd62e2b\";\n\n\n/// Получить популярные фильмы\nexport const getTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    const trendingMovies = response.data.results.map(movie => {\n        const {id, title} = movie;\n        return {\n            id,\n            title\n        }\n    })\n    return trendingMovies;\n};\n\n/// Получать фильмы при поиске\nexport const getMovieOnSearch = (searchQuery) => {\n    return fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`)\n        .then(response => response.json())\n        .then(data => {\n            const movieList = data.results.map(movie => {\n                const { id, title } = movie;\n                return {\n                    id,\n                    title\n                }\n            })\n    \n            if (movieList.length === 0) {\n                alert(\"We can't found anythings, please repeate your request\")\n                return [];\n            }\n\n            return movieList;\n        });\n}\n\n\n//Получать информацию о фильме\nexport const getMovieDetails = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n    const {vote_average, title, overview, genres, poster_path, release_date} = response.data;\n\n    return {\n        vote_average,\n        title,\n        overview,\n        genres, \n        poster_path,\n        release_date}\n};\n\n\n/// Получать состав актеров\nexport const getMovieCast = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n\n    const castInfo = response.data.cast.map(a => {\n        const {name, character, profile_path, id} = a;\n        return {\n            name,\n            character,\n            profile_path,\n            id}\n    });\n\n    return castInfo;\n};\n\n\n//получать обзоры фильмов\nexport const getMovieReviews = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    const reviews = response.data.results.map(a => {\n        const {id, author, content } = a;\n        return {\n            id,\n            author,\n            content}\n    });  \n    \n    return reviews;\n}"],"names":["ReviewsText","styled","ReviewsList","ReviewsListItem","ReviewsContent","movieId","useParams","useState","reviews","setReviews","useEffect","getMovieReviews","then","length","map","review","id","content","author","axios","API_KEY","getTrendingMovies","response","trendingMovies","data","results","movie","title","getMovieOnSearch","searchQuery","fetch","json","movieList","alert","getMovieDetails","vote_average","overview","genres","poster_path","release_date","getMovieCast","castInfo","cast","a","name","character","profile_path"],"sourceRoot":""}